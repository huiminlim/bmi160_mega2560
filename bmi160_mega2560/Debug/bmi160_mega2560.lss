
bmi160_mega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800200  00000d3a  00000dce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005a  00800266  00800266  00000e34  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025fe  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000139d  00000000  00000000  0000361e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ce3  00000000  00000000  000049bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e8  00000000  00000000  000066a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001636a  00000000  00000000  00006a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016b8  00000000  00000000  0001cdf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0001e4aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000014ea  00000000  00000000  0001e5aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e3       	ldi	r30, 0x3A	; 58
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 36       	cpi	r26, 0x66	; 102
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e6       	ldi	r26, 0x66	; 102
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 3c       	cpi	r26, 0xC0	; 192
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	85 d2       	rcall	.+1290   	; 0x62a <main>
 120:	0a c6       	rjmp	.+3092   	; 0xd36 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__portable_avr_delay_cycles>:
    }
    else {
        bmi_range = BMI160_GYRO_RANGE_125;
    }

    set_full_scale_gyro_range(bmi_range);
 124:	04 c0       	rjmp	.+8      	; 0x12e <__portable_avr_delay_cycles+0xa>
 126:	61 50       	subi	r22, 0x01	; 1
 128:	71 09       	sbc	r23, r1
 12a:	81 09       	sbc	r24, r1
 12c:	91 09       	sbc	r25, r1
 12e:	61 15       	cp	r22, r1
 130:	71 05       	cpc	r23, r1
 132:	81 05       	cpc	r24, r1
 134:	91 05       	cpc	r25, r1
 136:	b9 f7       	brne	.-18     	; 0x126 <__portable_avr_delay_cycles+0x2>
 138:	08 95       	ret

0000013a <spixfer>:
 13a:	8e bd       	out	0x2e, r24	; 46
 13c:	00 00       	nop
 13e:	0d b4       	in	r0, 0x2d	; 45
 140:	07 fe       	sbrs	r0, 7
 142:	fd cf       	rjmp	.-6      	; 0x13e <spixfer+0x4>
 144:	8e b5       	in	r24, 0x2e	; 46
 146:	08 95       	ret

00000148 <read8>:
 148:	28 98       	cbi	0x05, 0	; 5
 14a:	80 68       	ori	r24, 0x80	; 128
 14c:	f6 df       	rcall	.-20     	; 0x13a <spixfer>
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	f4 df       	rcall	.-24     	; 0x13a <spixfer>
 152:	28 9a       	sbi	0x05, 0	; 5
 154:	08 95       	ret

00000156 <get_rotation>:
 156:	9f 92       	push	r9
 158:	af 92       	push	r10
 15a:	bf 92       	push	r11
 15c:	cf 92       	push	r12
 15e:	df 92       	push	r13
 160:	ef 92       	push	r14
 162:	ff 92       	push	r15
 164:	0f 93       	push	r16
 166:	1f 93       	push	r17
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	6c 01       	movw	r12, r24
 16e:	7b 01       	movw	r14, r22
 170:	8a 01       	movw	r16, r20
 172:	8c e0       	ldi	r24, 0x0C	; 12
 174:	e9 df       	rcall	.-46     	; 0x148 <read8>
 176:	b8 2e       	mov	r11, r24
 178:	8d e0       	ldi	r24, 0x0D	; 13
 17a:	e6 df       	rcall	.-52     	; 0x148 <read8>
 17c:	98 2e       	mov	r9, r24
 17e:	8e e0       	ldi	r24, 0x0E	; 14
 180:	e3 df       	rcall	.-58     	; 0x148 <read8>
 182:	d8 2f       	mov	r29, r24
 184:	8f e0       	ldi	r24, 0x0F	; 15
 186:	e0 df       	rcall	.-64     	; 0x148 <read8>
 188:	a8 2e       	mov	r10, r24
 18a:	80 e1       	ldi	r24, 0x10	; 16
 18c:	dd df       	rcall	.-70     	; 0x148 <read8>
 18e:	c8 2f       	mov	r28, r24
 190:	81 e1       	ldi	r24, 0x11	; 17
 192:	da df       	rcall	.-76     	; 0x148 <read8>
 194:	2b 2d       	mov	r18, r11
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	39 29       	or	r19, r9
 19a:	f6 01       	movw	r30, r12
 19c:	31 83       	std	Z+1, r19	; 0x01
 19e:	20 83       	st	Z, r18
 1a0:	2d 2f       	mov	r18, r29
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	3a 29       	or	r19, r10
 1a6:	f7 01       	movw	r30, r14
 1a8:	31 83       	std	Z+1, r19	; 0x01
 1aa:	20 83       	st	Z, r18
 1ac:	2c 2f       	mov	r18, r28
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	38 2b       	or	r19, r24
 1b2:	f8 01       	movw	r30, r16
 1b4:	31 83       	std	Z+1, r19	; 0x01
 1b6:	20 83       	st	Z, r18
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	ff 90       	pop	r15
 1c2:	ef 90       	pop	r14
 1c4:	df 90       	pop	r13
 1c6:	cf 90       	pop	r12
 1c8:	bf 90       	pop	r11
 1ca:	af 90       	pop	r10
 1cc:	9f 90       	pop	r9
 1ce:	08 95       	ret

000001d0 <read_gyro>:
 1d0:	cf 92       	push	r12
 1d2:	df 92       	push	r13
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	00 d0       	rcall	.+0      	; 0x1e2 <read_gyro+0x12>
 1e2:	00 d0       	rcall	.+0      	; 0x1e4 <read_gyro+0x14>
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
 1e8:	6c 01       	movw	r12, r24
 1ea:	7b 01       	movw	r14, r22
 1ec:	8a 01       	movw	r16, r20
 1ee:	1a 82       	std	Y+2, r1	; 0x02
 1f0:	19 82       	std	Y+1, r1	; 0x01
 1f2:	1c 82       	std	Y+4, r1	; 0x04
 1f4:	1b 82       	std	Y+3, r1	; 0x03
 1f6:	1e 82       	std	Y+6, r1	; 0x06
 1f8:	1d 82       	std	Y+5, r1	; 0x05
 1fa:	ae 01       	movw	r20, r28
 1fc:	4b 5f       	subi	r20, 0xFB	; 251
 1fe:	5f 4f       	sbci	r21, 0xFF	; 255
 200:	be 01       	movw	r22, r28
 202:	6d 5f       	subi	r22, 0xFD	; 253
 204:	7f 4f       	sbci	r23, 0xFF	; 255
 206:	ce 01       	movw	r24, r28
 208:	01 96       	adiw	r24, 0x01	; 1
 20a:	a5 df       	rcall	.-182    	; 0x156 <get_rotation>
 20c:	89 81       	ldd	r24, Y+1	; 0x01
 20e:	9a 81       	ldd	r25, Y+2	; 0x02
 210:	f6 01       	movw	r30, r12
 212:	91 83       	std	Z+1, r25	; 0x01
 214:	80 83       	st	Z, r24
 216:	8b 81       	ldd	r24, Y+3	; 0x03
 218:	9c 81       	ldd	r25, Y+4	; 0x04
 21a:	f7 01       	movw	r30, r14
 21c:	91 83       	std	Z+1, r25	; 0x01
 21e:	80 83       	st	Z, r24
 220:	8d 81       	ldd	r24, Y+5	; 0x05
 222:	9e 81       	ldd	r25, Y+6	; 0x06
 224:	f8 01       	movw	r30, r16
 226:	91 83       	std	Z+1, r25	; 0x01
 228:	80 83       	st	Z, r24
 22a:	26 96       	adiw	r28, 0x06	; 6
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	f8 94       	cli
 230:	de bf       	out	0x3e, r29	; 62
 232:	0f be       	out	0x3f, r0	; 63
 234:	cd bf       	out	0x3d, r28	; 61
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	0f 91       	pop	r16
 23e:	ff 90       	pop	r15
 240:	ef 90       	pop	r14
 242:	df 90       	pop	r13
 244:	cf 90       	pop	r12
 246:	08 95       	ret

00000248 <reg_read>:
 248:	7f cf       	rjmp	.-258    	; 0x148 <read8>
 24a:	08 95       	ret

0000024c <write8>:
 24c:	cf 93       	push	r28
 24e:	c6 2f       	mov	r28, r22
 250:	28 98       	cbi	0x05, 0	; 5
 252:	73 df       	rcall	.-282    	; 0x13a <spixfer>
 254:	8c 2f       	mov	r24, r28
 256:	71 df       	rcall	.-286    	; 0x13a <spixfer>
 258:	28 9a       	sbi	0x05, 0	; 5
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <reg_write_bits>:
 25e:	0f 93       	push	r16
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	d8 2f       	mov	r29, r24
 268:	c6 2f       	mov	r28, r22
 26a:	14 2f       	mov	r17, r20
 26c:	02 2f       	mov	r16, r18
 26e:	ec df       	rcall	.-40     	; 0x248 <reg_read>
 270:	21 e0       	ldi	r18, 0x01	; 1
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <reg_write_bits+0x1c>
 276:	22 0f       	add	r18, r18
 278:	33 1f       	adc	r19, r19
 27a:	0a 95       	dec	r16
 27c:	e2 f7       	brpl	.-8      	; 0x276 <reg_write_bits+0x18>
 27e:	21 50       	subi	r18, 0x01	; 1
 280:	31 09       	sbc	r19, r1
 282:	01 2e       	mov	r0, r17
 284:	02 c0       	rjmp	.+4      	; 0x28a <reg_write_bits+0x2c>
 286:	22 0f       	add	r18, r18
 288:	33 1f       	adc	r19, r19
 28a:	0a 94       	dec	r0
 28c:	e2 f7       	brpl	.-8      	; 0x286 <reg_write_bits+0x28>
 28e:	6c 2f       	mov	r22, r28
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <reg_write_bits+0x3a>
 294:	66 0f       	add	r22, r22
 296:	77 1f       	adc	r23, r23
 298:	1a 95       	dec	r17
 29a:	e2 f7       	brpl	.-8      	; 0x294 <reg_write_bits+0x36>
 29c:	92 2f       	mov	r25, r18
 29e:	90 95       	com	r25
 2a0:	89 23       	and	r24, r25
 2a2:	26 23       	and	r18, r22
 2a4:	62 2f       	mov	r22, r18
 2a6:	68 2b       	or	r22, r24
 2a8:	8d 2f       	mov	r24, r29
 2aa:	d0 df       	rcall	.-96     	; 0x24c <write8>
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	1f 91       	pop	r17
 2b2:	0f 91       	pop	r16
 2b4:	08 95       	ret

000002b6 <set_full_scale_gyro_range>:
 2b6:	23 e0       	ldi	r18, 0x03	; 3
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	68 2f       	mov	r22, r24
 2bc:	83 e4       	ldi	r24, 0x43	; 67
 2be:	cf cf       	rjmp	.-98     	; 0x25e <reg_write_bits>
 2c0:	08 95       	ret

000002c2 <set_full_scale_accel_range>:
    @param range New full-scale accelerometer range setting
    @see getFullScaleAccelRange()
    @see BMI160AccelRange
*/
void set_full_scale_accel_range(uint8_t range) {
    reg_write_bits(BMI160_RA_ACCEL_RANGE, range,
 2c2:	24 e0       	ldi	r18, 0x04	; 4
 2c4:	40 e0       	ldi	r20, 0x00	; 0
 2c6:	68 2f       	mov	r22, r24
 2c8:	81 e4       	ldi	r24, 0x41	; 65
 2ca:	c9 cf       	rjmp	.-110    	; 0x25e <reg_write_bits>
 2cc:	08 95       	ret

000002ce <bmi160_init>:
void reg_write(uint8_t reg, uint8_t data) {
    //uint8_t buffer[2];
    //buffer[0] = reg;
    //buffer[1] = data;
    //serial_buffer_transfer(buffer, 2, 0);
    write8(reg, data);
 2ce:	66 eb       	ldi	r22, 0xB6	; 182
 2d0:	8e e7       	ldi	r24, 0x7E	; 126
 2d2:	bc df       	rcall	.-136    	; 0x24c <write8>
*/
uint8_t bmi160_init(void) {
    // Initialization of sensor
    /* Issue a soft-reset to bring the device into a clean state */
    reg_write(BMI160_RA_CMD, BMI160_CMD_SOFT_RESET);
    delay_ms(10);
 2d4:	63 e8       	ldi	r22, 0x83	; 131
 2d6:	76 e0       	ldi	r23, 0x06	; 6
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	23 df       	rcall	.-442    	; 0x124 <__portable_avr_delay_cycles>

    /* Issue a dummy-read to force the device into SPI comms mode */
    reg_read(0x7F);
 2de:	8f e7       	ldi	r24, 0x7F	; 127
 2e0:	b3 df       	rcall	.-154    	; 0x248 <reg_read>
 2e2:	63 e8       	ldi	r22, 0x83	; 131
    delay_ms(10);
 2e4:	76 e0       	ldi	r23, 0x06	; 6
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	1c df       	rcall	.-456    	; 0x124 <__portable_avr_delay_cycles>
void reg_write(uint8_t reg, uint8_t data) {
    //uint8_t buffer[2];
    //buffer[0] = reg;
    //buffer[1] = data;
    //serial_buffer_transfer(buffer, 2, 0);
    write8(reg, data);
 2ec:	61 e1       	ldi	r22, 0x11	; 17
 2ee:	8e e7       	ldi	r24, 0x7E	; 126
 2f0:	ad df       	rcall	.-166    	; 0x24c <write8>
    reg_read(0x7F);
    delay_ms(10);

    /* Power up the accelerometer */
    reg_write(BMI160_RA_CMD, BMI160_CMD_ACC_MODE_NORMAL);
    delay_ms(10);
 2f2:	63 e8       	ldi	r22, 0x83	; 131
 2f4:	76 e0       	ldi	r23, 0x06	; 6
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	14 df       	rcall	.-472    	; 0x124 <__portable_avr_delay_cycles>


    /* Wait for power-up to complete */
    while (0x1 != reg_read_bits(BMI160_RA_PMU_STATUS,
 2fc:	05 c0       	rjmp	.+10     	; 0x308 <bmi160_init+0x3a>
                                BMI160_ACC_PMU_STATUS_BIT,
                                BMI160_ACC_PMU_STATUS_LEN)) {
        delay_ms(10);
 2fe:	63 e8       	ldi	r22, 0x83	; 131
 300:	76 e0       	ldi	r23, 0x06	; 6
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e df       	rcall	.-484    	; 0x124 <__portable_avr_delay_cycles>
/*!
     @brief  Read a given register address specific bits at some position
	 Wrapper function to read register from sensor, uses reg_read()/read8() function
*/
uint8_t reg_read_bits(uint8_t reg, uint8_t pos, uint8_t len) {
    uint8_t b = reg_read(reg);
 308:	83 e0       	ldi	r24, 0x03	; 3
 30a:	9e df       	rcall	.-196    	; 0x248 <reg_read>
 30c:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t mask = (1 << len) - 1;
    b >>= pos;
 30e:	95 95       	asr	r25
 310:	87 95       	ror	r24
 312:	95 95       	asr	r25
 314:	87 95       	ror	r24
 316:	95 95       	asr	r25
 318:	87 95       	ror	r24
 31a:	95 95       	asr	r25
 31c:	87 95       	ror	r24
    reg_write(BMI160_RA_CMD, BMI160_CMD_ACC_MODE_NORMAL);
    delay_ms(10);


    /* Wait for power-up to complete */
    while (0x1 != reg_read_bits(BMI160_RA_PMU_STATUS,
 31e:	83 70       	andi	r24, 0x03	; 3
 320:	81 30       	cpi	r24, 0x01	; 1
void reg_write(uint8_t reg, uint8_t data) {
    //uint8_t buffer[2];
    //buffer[0] = reg;
    //buffer[1] = data;
    //serial_buffer_transfer(buffer, 2, 0);
    write8(reg, data);
 322:	69 f7       	brne	.-38     	; 0x2fe <bmi160_init+0x30>
 324:	65 e1       	ldi	r22, 0x15	; 21
 326:	8e e7       	ldi	r24, 0x7E	; 126
 328:	91 df       	rcall	.-222    	; 0x24c <write8>
    }


    /* Power up the gyroscope */
    reg_write(BMI160_RA_CMD, BMI160_CMD_GYR_MODE_NORMAL);
    delay_ms(1);
 32a:	67 ea       	ldi	r22, 0xA7	; 167
 32c:	70 e0       	ldi	r23, 0x00	; 0
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0

    /* Wait for power-up to complete */
    while (0x1 != reg_read_bits(BMI160_RA_PMU_STATUS,
 332:	f8 de       	rcall	.-528    	; 0x124 <__portable_avr_delay_cycles>
                                BMI160_GYR_PMU_STATUS_BIT,
                                BMI160_GYR_PMU_STATUS_LEN)) {
        delay_ms(10);
 334:	05 c0       	rjmp	.+10     	; 0x340 <bmi160_init+0x72>
 336:	63 e8       	ldi	r22, 0x83	; 131
 338:	76 e0       	ldi	r23, 0x06	; 6
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	f2 de       	rcall	.-540    	; 0x124 <__portable_avr_delay_cycles>
/*!
     @brief  Read a given register address specific bits at some position
	 Wrapper function to read register from sensor, uses reg_read()/read8() function
*/
uint8_t reg_read_bits(uint8_t reg, uint8_t pos, uint8_t len) {
    uint8_t b = reg_read(reg);
 340:	83 e0       	ldi	r24, 0x03	; 3
 342:	82 df       	rcall	.-252    	; 0x248 <reg_read>
    uint8_t mask = (1 << len) - 1;
    b >>= pos;
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	95 95       	asr	r25
 348:	87 95       	ror	r24
 34a:	95 95       	asr	r25
    /* Power up the gyroscope */
    reg_write(BMI160_RA_CMD, BMI160_CMD_GYR_MODE_NORMAL);
    delay_ms(1);

    /* Wait for power-up to complete */
    while (0x1 != reg_read_bits(BMI160_RA_PMU_STATUS,
 34c:	87 95       	ror	r24
 34e:	83 70       	andi	r24, 0x03	; 3
                                BMI160_GYR_PMU_STATUS_LEN)) {
        delay_ms(10);
    }


    set_full_scale_gyro_range(BMI160_GYRO_RANGE_250);
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	89 f7       	brne	.-30     	; 0x336 <bmi160_init+0x68>
    set_full_scale_accel_range(BMI160_ACCEL_RANGE_2G);
 354:	83 e0       	ldi	r24, 0x03	; 3
 356:	af df       	rcall	.-162    	; 0x2b6 <set_full_scale_gyro_range>
    }
    else {
        bmi_range = BMI160_GYRO_RANGE_125;
    }

    set_full_scale_gyro_range(bmi_range);
 358:	83 e0       	ldi	r24, 0x03	; 3
 35a:	b3 df       	rcall	.-154    	; 0x2c2 <set_full_scale_accel_range>
 35c:	83 e0       	ldi	r24, 0x03	; 3
void reg_write(uint8_t reg, uint8_t data) {
    //uint8_t buffer[2];
    //buffer[0] = reg;
    //buffer[1] = data;
    //serial_buffer_transfer(buffer, 2, 0);
    write8(reg, data);
 35e:	ab df       	rcall	.-170    	; 0x2b6 <set_full_scale_gyro_range>
 360:	6f ef       	ldi	r22, 0xFF	; 255
 362:	85 e5       	ldi	r24, 0x55	; 85
 364:	73 df       	rcall	.-282    	; 0x24c <write8>
 366:	60 ef       	ldi	r22, 0xF0	; 240
 368:	86 e5       	ldi	r24, 0x56	; 86
 36a:	70 df       	rcall	.-288    	; 0x24c <write8>
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	87 e5       	ldi	r24, 0x57	; 87
 370:	6d df       	rcall	.-294    	; 0x24c <write8>
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	69 cf       	rjmp	.-302    	; 0x248 <reg_read>
    /* Only PIN1 interrupts currently supported - map all interrupts to PIN1 */
    reg_write(BMI160_RA_INT_MAP_0, 0xFF);
    reg_write(BMI160_RA_INT_MAP_1, 0xF0);
    reg_write(BMI160_RA_INT_MAP_2, 0x00);

    return reg_read(BMI160_RA_CHIP_ID);
 376:	08 95       	ret

00000378 <spi_init>:
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 378:	28 9a       	sbi	0x05, 0	; 5
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
 37a:	20 9a       	sbi	0x04, 0	; 4

    // Set SS as output pin
    ioport_set_pin_dir(SPI_HARDWARE_SS, IOPORT_DIR_OUTPUT);

    // Initialize as SPI master
    SPCR |= (1 << MSTR);
 37c:	8c b5       	in	r24, 0x2c	; 44
 37e:	80 61       	ori	r24, 0x10	; 16
 380:	8c bd       	out	0x2c, r24	; 44
    SPCR |= (1 << SPE);
 382:	8c b5       	in	r24, 0x2c	; 44
 384:	80 64       	ori	r24, 0x40	; 64
 386:	8c bd       	out	0x2c, r24	; 44
 388:	21 9a       	sbi	0x04, 1	; 4
 38a:	22 9a       	sbi	0x04, 2	; 4
    ioport_set_pin_dir(SPI_HARDWARE_MOSI, IOPORT_DIR_OUTPUT);

    // MISO pin is override to Input automatically
    //ioport_set_pin_dir(SPI_HARDWARE_MISO, IOPORT_DIR_INPUT);

    num_initialized = 0;
 38c:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <__data_end+0x1>
 390:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <__data_end>
 394:	08 95       	ret

00000396 <uart_putchar>:
/*
    Send character c down the UART Tx, wait until tx holding register
    is empty.
*/
int
uart_putchar(char c, FILE *stream) {
 396:	cf 93       	push	r28
 398:	c8 2f       	mov	r28, r24

    if (c == '\a') {
 39a:	87 30       	cpi	r24, 0x07	; 7
 39c:	61 f4       	brne	.+24     	; 0x3b6 <uart_putchar+0x20>
        fputs("*ring*\n", stderr);
 39e:	20 91 be 02 	lds	r18, 0x02BE	; 0x8002be <__iob+0x4>
 3a2:	30 91 bf 02 	lds	r19, 0x02BF	; 0x8002bf <__iob+0x5>
 3a6:	47 e0       	ldi	r20, 0x07	; 7
 3a8:	50 e0       	ldi	r21, 0x00	; 0
 3aa:	61 e0       	ldi	r22, 0x01	; 1
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	8e e0       	ldi	r24, 0x0E	; 14
 3b0:	92 e0       	ldi	r25, 0x02	; 2
 3b2:	8f d1       	rcall	.+798    	; 0x6d2 <fwrite>
        return 0;
 3b4:	0b c0       	rjmp	.+22     	; 0x3cc <uart_putchar+0x36>
    }

    if (c == '\n') {
 3b6:	8a 30       	cpi	r24, 0x0A	; 10
 3b8:	11 f4       	brne	.+4      	; 0x3be <uart_putchar+0x28>
        uart_putchar('\r', stream);
 3ba:	8d e0       	ldi	r24, 0x0D	; 13
 3bc:	ec df       	rcall	.-40     	; 0x396 <uart_putchar>
    }

    loop_until_bit_is_set(UCSR0A, UDRE0);
 3be:	e0 ec       	ldi	r30, 0xC0	; 192
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	80 81       	ld	r24, Z
 3c4:	85 ff       	sbrs	r24, 5
 3c6:	fd cf       	rjmp	.-6      	; 0x3c2 <uart_putchar+0x2c>
    UDR0 = c;
 3c8:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

    return 0;
}
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	cf 91       	pop	r28
 3d2:	08 95       	ret

000003d4 <uart_getchar>:

    Successive calls to uart_getchar() will be satisfied from the
    internal buffer until that buffer is emptied again.
*/
int
uart_getchar(FILE *stream) {
 3d4:	6f 92       	push	r6
 3d6:	7f 92       	push	r7
 3d8:	8f 92       	push	r8
 3da:	9f 92       	push	r9
 3dc:	af 92       	push	r10
 3de:	bf 92       	push	r11
 3e0:	cf 92       	push	r12
 3e2:	df 92       	push	r13
 3e4:	ef 92       	push	r14
 3e6:	ff 92       	push	r15
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
    uint8_t c;
    char *cp, *cp2;
    static char b[RX_BUFSIZE];
    static char *rxp;

    if (rxp == 0)
 3f0:	20 91 b8 02 	lds	r18, 0x02B8	; 0x8002b8 <rxp.2118>
 3f4:	30 91 b9 02 	lds	r19, 0x02B9	; 0x8002b9 <rxp.2118+0x1>
 3f8:	23 2b       	or	r18, r19
 3fa:	09 f0       	breq	.+2      	; 0x3fe <uart_getchar+0x2a>
 3fc:	cc c0       	rjmp	.+408    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 3fe:	8c 01       	movw	r16, r24
 400:	0f 2e       	mov	r0, r31
 402:	f8 e6       	ldi	r31, 0x68	; 104
 404:	8f 2e       	mov	r8, r31
 406:	f2 e0       	ldi	r31, 0x02	; 2
 408:	9f 2e       	mov	r9, r31
 40a:	f0 2d       	mov	r31, r0
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);
 40c:	c0 ec       	ldi	r28, 0xC0	; 192
 40e:	d0 e0       	ldi	r29, 0x00	; 0

            if (UCSR0A & _BV(DOR0)) {
                return _FDEV_ERR;
            }

            c = UDR0;
 410:	0f 2e       	mov	r0, r31
 412:	f6 ec       	ldi	r31, 0xC6	; 198
 414:	cf 2e       	mov	r12, r31
 416:	d1 2c       	mov	r13, r1
 418:	f0 2d       	mov	r31, r0
 41a:	54 01       	movw	r10, r8
 41c:	0f 2e       	mov	r0, r31
 41e:	f7 e6       	ldi	r31, 0x67	; 103
 420:	6f 2e       	mov	r6, r31
 422:	f2 e0       	ldi	r31, 0x02	; 2
 424:	7f 2e       	mov	r7, r31
 426:	f0 2d       	mov	r31, r0
    static char b[RX_BUFSIZE];
    static char *rxp;

    if (rxp == 0)
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);
 428:	88 81       	ld	r24, Y
 42a:	88 23       	and	r24, r24
 42c:	ec f7       	brge	.-6      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>

            if (UCSR0A & _BV(FE0)) {
 42e:	88 81       	ld	r24, Y
 430:	84 fd       	sbrc	r24, 4
 432:	c4 c0       	rjmp	.+392    	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
                return _FDEV_EOF;
            }

            if (UCSR0A & _BV(DOR0)) {
 434:	88 81       	ld	r24, Y
 436:	83 fd       	sbrc	r24, 3
 438:	c4 c0       	rjmp	.+392    	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
                return _FDEV_ERR;
            }

            c = UDR0;
 43a:	f6 01       	movw	r30, r12
 43c:	80 81       	ld	r24, Z

            /* behaviour similar to Unix stty ICRNL */
            if (c == '\r') {
 43e:	8d 30       	cpi	r24, 0x0D	; 13
 440:	11 f0       	breq	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
                c = '\n';
            }

            if (c == '\n') {
 442:	8a 30       	cpi	r24, 0x0A	; 10
 444:	61 f4       	brne	.+24     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
                *cp = c;
 446:	8a e0       	ldi	r24, 0x0A	; 10
 448:	f4 01       	movw	r30, r8
 44a:	80 83       	st	Z, r24
                uart_putchar(c, stream);
 44c:	b8 01       	movw	r22, r16
 44e:	a3 df       	rcall	.-186    	; 0x396 <uart_putchar>
                rxp = b;
 450:	88 e6       	ldi	r24, 0x68	; 104
 452:	92 e0       	ldi	r25, 0x02	; 2
 454:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <rxp.2118+0x1>
 458:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <rxp.2118>
                break;
 45c:	9c c0       	rjmp	.+312    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
            }
            else if (c == '\t') {
 45e:	89 30       	cpi	r24, 0x09	; 9
 460:	39 f0       	breq	.+14     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
                c = ' ';
            }

            if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 462:	90 ee       	ldi	r25, 0xE0	; 224
 464:	98 0f       	add	r25, r24
 466:	9f 35       	cpi	r25, 0x5F	; 95
 468:	20 f0       	brcs	.+8      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 46a:	80 3a       	cpi	r24, 0xA0	; 160
 46c:	a8 f0       	brcs	.+42     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 46e:	01 c0       	rjmp	.+2      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
                uart_putchar(c, stream);
                rxp = b;
                break;
            }
            else if (c == '\t') {
                c = ' ';
 470:	80 e2       	ldi	r24, 0x20	; 32
            }

            if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
                    c >= (uint8_t)'\xa0') {
                if (cp == b + RX_BUFSIZE - 1) {
 472:	f7 eb       	ldi	r31, 0xB7	; 183
 474:	8f 16       	cp	r8, r31
 476:	f2 e0       	ldi	r31, 0x02	; 2
 478:	9f 06       	cpc	r9, r31
 47a:	21 f4       	brne	.+8      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
                    uart_putchar('\a', stream);
 47c:	b8 01       	movw	r22, r16
 47e:	87 e0       	ldi	r24, 0x07	; 7
 480:	8a df       	rcall	.-236    	; 0x396 <uart_putchar>
 482:	d2 cf       	rjmp	.-92     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
                }
                else {
                    *cp++ = c;
 484:	74 01       	movw	r14, r8
 486:	9f ef       	ldi	r25, 0xFF	; 255
 488:	e9 1a       	sub	r14, r25
 48a:	f9 0a       	sbc	r15, r25
 48c:	f4 01       	movw	r30, r8
                    uart_putchar(c, stream);
 48e:	80 83       	st	Z, r24
 490:	b8 01       	movw	r22, r16
 492:	81 df       	rcall	.-254    	; 0x396 <uart_putchar>
                    c >= (uint8_t)'\xa0') {
                if (cp == b + RX_BUFSIZE - 1) {
                    uart_putchar('\a', stream);
                }
                else {
                    *cp++ = c;
 494:	47 01       	movw	r8, r14
 496:	c8 cf       	rjmp	.-112    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
                }

                continue;
            }

            switch (c) {
 498:	82 31       	cpi	r24, 0x12	; 18
 49a:	b9 f1       	breq	.+110    	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 49c:	30 f4       	brcc	.+12     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 49e:	83 30       	cpi	r24, 0x03	; 3
 4a0:	09 f4       	brne	.+2      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4a2:	92 c0       	rjmp	.+292    	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 4a4:	88 30       	cpi	r24, 0x08	; 8
 4a6:	e9 f0       	breq	.+58     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4a8:	bf cf       	rjmp	.-130    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 4aa:	87 31       	cpi	r24, 0x17	; 23
 4ac:	29 f0       	breq	.+10     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4ae:	8f 37       	cpi	r24, 0x7F	; 127
 4b0:	c1 f0       	breq	.+48     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4b2:	85 31       	cpi	r24, 0x15	; 21
 4b4:	79 f0       	breq	.+30     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4b6:	b8 cf       	rjmp	.-144    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
                }

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
 4b8:	f8 e6       	ldi	r31, 0x68	; 104
 4ba:	8f 16       	cp	r8, r31
 4bc:	f2 e0       	ldi	r31, 0x02	; 2
 4be:	9f 06       	cpc	r9, r31
 4c0:	09 f0       	breq	.+2      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4c2:	08 f4       	brcc	.+2      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4c4:	b1 cf       	rjmp	.-158    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 4c6:	f4 01       	movw	r30, r8
 4c8:	31 97       	sbiw	r30, 0x01	; 1
 4ca:	80 81       	ld	r24, Z
 4cc:	80 32       	cpi	r24, 0x20	; 32
 4ce:	09 f0       	breq	.+2      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4d0:	4a c0       	rjmp	.+148    	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
 4d2:	aa cf       	rjmp	.-172    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
                }

                break;

            case 'u' & 0x1f:
                while (cp > b) {
 4d4:	88 e6       	ldi	r24, 0x68	; 104
 4d6:	88 16       	cp	r8, r24
 4d8:	82 e0       	ldi	r24, 0x02	; 2
 4da:	98 06       	cpc	r9, r24
 4dc:	09 f0       	breq	.+2      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4de:	70 f5       	brcc	.+92     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 4e0:	a3 cf       	rjmp	.-186    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
            case 'c' & 0x1f:
                return -1;

            case '\b':
            case '\x7f':
                if (cp > b) {
 4e2:	98 e6       	ldi	r25, 0x68	; 104
 4e4:	89 16       	cp	r8, r25
 4e6:	92 e0       	ldi	r25, 0x02	; 2
 4e8:	99 06       	cpc	r9, r25
 4ea:	09 f0       	breq	.+2      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4ec:	08 f4       	brcc	.+2      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
                    uart_putchar('\b', stream);
 4ee:	9c cf       	rjmp	.-200    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 4f0:	b8 01       	movw	r22, r16
 4f2:	88 e0       	ldi	r24, 0x08	; 8
                    uart_putchar(' ', stream);
 4f4:	50 df       	rcall	.-352    	; 0x396 <uart_putchar>
 4f6:	b8 01       	movw	r22, r16
 4f8:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
 4fa:	4d df       	rcall	.-358    	; 0x396 <uart_putchar>
 4fc:	b8 01       	movw	r22, r16
 4fe:	88 e0       	ldi	r24, 0x08	; 8
 500:	4a df       	rcall	.-364    	; 0x396 <uart_putchar>
                    cp--;
 502:	e1 e0       	ldi	r30, 0x01	; 1
 504:	8e 1a       	sub	r8, r30
 506:	91 08       	sbc	r9, r1
                }

                break;

            case 'r' & 0x1f:
                uart_putchar('\r', stream);
 508:	8f cf       	rjmp	.-226    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 50a:	b8 01       	movw	r22, r16
 50c:	8d e0       	ldi	r24, 0x0D	; 13
 50e:	43 df       	rcall	.-378    	; 0x396 <uart_putchar>

                for (cp2 = b; cp2 < cp; cp2++) {
 510:	f8 e6       	ldi	r31, 0x68	; 104
 512:	8f 16       	cp	r8, r31
 514:	f2 e0       	ldi	r31, 0x02	; 2
 516:	9f 06       	cpc	r9, r31
 518:	09 f0       	breq	.+2      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 51a:	08 f4       	brcc	.+2      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 51c:	85 cf       	rjmp	.-246    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 51e:	0f 2e       	mov	r0, r31
 520:	f8 e6       	ldi	r31, 0x68	; 104
 522:	ef 2e       	mov	r14, r31
 524:	f2 e0       	ldi	r31, 0x02	; 2
 526:	ff 2e       	mov	r15, r31
                    uart_putchar(*cp2, stream);
 528:	f0 2d       	mov	r31, r0
 52a:	b8 01       	movw	r22, r16
 52c:	f7 01       	movw	r30, r14
 52e:	81 91       	ld	r24, Z+
 530:	7f 01       	movw	r14, r30
                break;

            case 'r' & 0x1f:
                uart_putchar('\r', stream);

                for (cp2 = b; cp2 < cp; cp2++) {
 532:	31 df       	rcall	.-414    	; 0x396 <uart_putchar>
 534:	8e 14       	cp	r8, r14
 536:	9f 04       	cpc	r9, r15

                break;

            case 'u' & 0x1f:
                while (cp > b) {
                    uart_putchar('\b', stream);
 538:	c1 f7       	brne	.-16     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 53a:	76 cf       	rjmp	.-276    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 53c:	b8 01       	movw	r22, r16
                    uart_putchar(' ', stream);
 53e:	88 e0       	ldi	r24, 0x08	; 8
 540:	2a df       	rcall	.-428    	; 0x396 <uart_putchar>
 542:	b8 01       	movw	r22, r16
 544:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
 546:	27 df       	rcall	.-434    	; 0x396 <uart_putchar>
 548:	b8 01       	movw	r22, r16
 54a:	88 e0       	ldi	r24, 0x08	; 8
 54c:	24 df       	rcall	.-440    	; 0x396 <uart_putchar>
                    cp--;
 54e:	f1 e0       	ldi	r31, 0x01	; 1
 550:	8f 1a       	sub	r8, r31
 552:	91 08       	sbc	r9, r1
                }

                break;

            case 'u' & 0x1f:
                while (cp > b) {
 554:	88 e6       	ldi	r24, 0x68	; 104
 556:	88 16       	cp	r8, r24
 558:	82 e0       	ldi	r24, 0x02	; 2
 55a:	98 06       	cpc	r9, r24
 55c:	79 f7       	brne	.-34     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 55e:	f3 01       	movw	r30, r6
 560:	31 96       	adiw	r30, 0x01	; 1
 562:	4f 01       	movw	r8, r30
 564:	61 cf       	rjmp	.-318    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 566:	74 01       	movw	r14, r8

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
                    uart_putchar('\b', stream);
 568:	f1 e0       	ldi	r31, 0x01	; 1
 56a:	ef 1a       	sub	r14, r31
 56c:	f1 08       	sbc	r15, r1
 56e:	b8 01       	movw	r22, r16
                    uart_putchar(' ', stream);
 570:	88 e0       	ldi	r24, 0x08	; 8
 572:	11 df       	rcall	.-478    	; 0x396 <uart_putchar>
 574:	b8 01       	movw	r22, r16
 576:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
 578:	0e df       	rcall	.-484    	; 0x396 <uart_putchar>
 57a:	b8 01       	movw	r22, r16
 57c:	88 e0       	ldi	r24, 0x08	; 8
 57e:	0b df       	rcall	.-490    	; 0x396 <uart_putchar>
                    cp--;
 580:	47 01       	movw	r8, r14
                }

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
 582:	ae 14       	cp	r10, r14
 584:	bf 04       	cpc	r11, r15
 586:	09 f4       	brne	.+2      	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 588:	4f cf       	rjmp	.-354    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 58a:	f7 01       	movw	r30, r14
 58c:	82 91       	ld	r24, -Z
 58e:	7f 01       	movw	r14, r30
 590:	80 32       	cpi	r24, 0x20	; 32
 592:	69 f7       	brne	.-38     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 594:	49 cf       	rjmp	.-366    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>

                break;
            }
        }

    c = *rxp++;
 596:	e0 91 b8 02 	lds	r30, 0x02B8	; 0x8002b8 <rxp.2118>
 59a:	f0 91 b9 02 	lds	r31, 0x02B9	; 0x8002b9 <rxp.2118+0x1>
 59e:	cf 01       	movw	r24, r30
 5a0:	01 96       	adiw	r24, 0x01	; 1
 5a2:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <rxp.2118+0x1>
 5a6:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <rxp.2118>
 5aa:	80 81       	ld	r24, Z

    if (c == '\n') {
 5ac:	8a 30       	cpi	r24, 0x0A	; 10
 5ae:	21 f4       	brne	.+8      	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
        rxp = 0;
 5b0:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <rxp.2118+0x1>
 5b4:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <rxp.2118>
    }

    return c;
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	08 c0       	rjmp	.+16     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
    if (rxp == 0)
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);

            if (UCSR0A & _BV(FE0)) {
                return _FDEV_EOF;
 5bc:	8e ef       	ldi	r24, 0xFE	; 254
 5be:	9f ef       	ldi	r25, 0xFF	; 255
 5c0:	05 c0       	rjmp	.+10     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
            }

            if (UCSR0A & _BV(DOR0)) {
                return _FDEV_ERR;
 5c2:	8f ef       	ldi	r24, 0xFF	; 255
 5c4:	9f ef       	ldi	r25, 0xFF	; 255
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
                continue;
            }

            switch (c) {
            case 'c' & 0x1f:
                return -1;
 5c8:	8f ef       	ldi	r24, 0xFF	; 255
 5ca:	9f ef       	ldi	r25, 0xFF	; 255
    if (c == '\n') {
        rxp = 0;
    }

    return c;
}
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	1f 91       	pop	r17
 5d2:	0f 91       	pop	r16
 5d4:	ff 90       	pop	r15
 5d6:	ef 90       	pop	r14
 5d8:	df 90       	pop	r13
 5da:	cf 90       	pop	r12
 5dc:	bf 90       	pop	r11
 5de:	af 90       	pop	r10
 5e0:	9f 90       	pop	r9
 5e2:	8f 90       	pop	r8
 5e4:	7f 90       	pop	r7
 5e6:	6f 90       	pop	r6
 5e8:	08 95       	ret

000005ea <uart_init>:
void uart_init(void) {
#if F_CPU < 2000000UL && defined(U2X)
    UCSRA = _BV(U2X);             /* improve baud rate error by using 2x clk */
    UBRRL = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
    UBRR0H = (uint8_t) (MYUBRR >> 8);
 5ea:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    UBRR0L = (uint8_t) MYUBRR;
 5ee:	80 e1       	ldi	r24, 0x10	; 16
 5f0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
#endif
    UCSR0B = (1 << RXEN0) | (1 << TXEN0); /* tx/rx enable */
 5f4:	88 e1       	ldi	r24, 0x18	; 24
 5f6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    UCSR0C = (3 << UCSZ00);
 5fa:	86 e0       	ldi	r24, 0x06	; 6
 5fc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    stdout = stdin = &usart0_str;
 600:	ea eb       	ldi	r30, 0xBA	; 186
 602:	f2 e0       	ldi	r31, 0x02	; 2
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	92 e0       	ldi	r25, 0x02	; 2
 608:	91 83       	std	Z+1, r25	; 0x01
 60a:	80 83       	st	Z, r24
 60c:	93 83       	std	Z+3, r25	; 0x03
 60e:	82 83       	std	Z+2, r24	; 0x02
 610:	08 95       	ret

00000612 <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
 612:	08 95       	ret

00000614 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
 614:	04 c0       	rjmp	.+8      	; 0x61e <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
 616:	61 50       	subi	r22, 0x01	; 1
 618:	71 09       	sbc	r23, r1
 61a:	81 09       	sbc	r24, r1
 61c:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
 61e:	61 15       	cp	r22, r1
 620:	71 05       	cpc	r23, r1
 622:	81 05       	cpc	r24, r1
 624:	91 05       	cpc	r25, r1
 626:	b9 f7       	brne	.-18     	; 0x616 <__portable_avr_delay_cycles+0x2>
 628:	08 95       	ret

0000062a <main>:
#include <spi.h>
#include <uart.h>
#include <bmi160.h>
#include <delay.h>

int main (void) {
 62a:	cf 93       	push	r28
 62c:	df 93       	push	r29
 62e:	00 d0       	rcall	.+0      	; 0x630 <main+0x6>
 630:	00 d0       	rcall	.+0      	; 0x632 <main+0x8>
 632:	cd b7       	in	r28, 0x3d	; 61
 634:	de b7       	in	r29, 0x3e	; 62
    /* Insert system clock initialization code here (sysclk_init()). */

    board_init();
 636:	ed df       	rcall	.-38     	; 0x612 <board_init>

    uart_init();
 638:	d8 df       	rcall	.-80     	; 0x5ea <uart_init>
 63a:	86 e1       	ldi	r24, 0x16	; 22
    printf("------- Default testing -------\r\n\r\n");
 63c:	92 e0       	ldi	r25, 0x02	; 2
 63e:	9e d0       	rcall	.+316    	; 0x77c <puts>

    spi_init();
 640:	9b de       	rcall	.-714    	; 0x378 <spi_init>
 642:	80 e0       	ldi	r24, 0x00	; 0

    uint8_t sensorID = reg_read(BMI160_RA_CHIP_ID);
 644:	01 de       	rcall	.-1022   	; 0x248 <reg_read>
 646:	1f 92       	push	r1
 648:	8f 93       	push	r24
    printf("Sensor id: 0x%x\r\n\r\n", sensorID);
 64a:	89 e3       	ldi	r24, 0x39	; 57
 64c:	92 e0       	ldi	r25, 0x02	; 2
 64e:	9f 93       	push	r25
 650:	8f 93       	push	r24
 652:	81 d0       	rcall	.+258    	; 0x756 <printf>
 654:	3c de       	rcall	.-904    	; 0x2ce <bmi160_init>

    sensorID = bmi160_init();
 656:	0f 90       	pop	r0
 658:	0f 90       	pop	r0
 65a:	0f 90       	pop	r0
 65c:	0f 90       	pop	r0
 65e:	0f 2e       	mov	r0, r31
 660:	fd e4       	ldi	r31, 0x4D	; 77
        // uint8_t sensorID = reg_read(BMI160_RA_CHIP_ID);
        // printf("Sensor id: 0x%x\r\n", sensorID);

        read_gyro(&gxRaw, &gyRaw, &gzRaw);

        printf("gx: %d ", gxRaw);
 662:	cf 2e       	mov	r12, r31
 664:	f2 e0       	ldi	r31, 0x02	; 2
 666:	df 2e       	mov	r13, r31
 668:	f0 2d       	mov	r31, r0
 66a:	0f 2e       	mov	r0, r31
 66c:	f5 e5       	ldi	r31, 0x55	; 85
        printf("gy: %d ", gyRaw);
 66e:	ef 2e       	mov	r14, r31
 670:	f2 e0       	ldi	r31, 0x02	; 2
 672:	ff 2e       	mov	r15, r31
 674:	f0 2d       	mov	r31, r0
 676:	0d e5       	ldi	r16, 0x5D	; 93
 678:	12 e0       	ldi	r17, 0x02	; 2
        printf("gx: %d\r\n", gzRaw);
 67a:	ae 01       	movw	r20, r28
 67c:	4b 5f       	subi	r20, 0xFB	; 251

    while (1) {
        // uint8_t sensorID = reg_read(BMI160_RA_CHIP_ID);
        // printf("Sensor id: 0x%x\r\n", sensorID);

        read_gyro(&gxRaw, &gyRaw, &gzRaw);
 67e:	5f 4f       	sbci	r21, 0xFF	; 255
 680:	be 01       	movw	r22, r28
 682:	6d 5f       	subi	r22, 0xFD	; 253
 684:	7f 4f       	sbci	r23, 0xFF	; 255
 686:	ce 01       	movw	r24, r28
 688:	01 96       	adiw	r24, 0x01	; 1
 68a:	a2 dd       	rcall	.-1212   	; 0x1d0 <read_gyro>
 68c:	8a 81       	ldd	r24, Y+2	; 0x02

        printf("gx: %d ", gxRaw);
 68e:	8f 93       	push	r24
 690:	89 81       	ldd	r24, Y+1	; 0x01
 692:	8f 93       	push	r24
 694:	df 92       	push	r13
 696:	cf 92       	push	r12
 698:	5e d0       	rcall	.+188    	; 0x756 <printf>
 69a:	8c 81       	ldd	r24, Y+4	; 0x04
        printf("gy: %d ", gyRaw);
 69c:	8f 93       	push	r24
 69e:	8b 81       	ldd	r24, Y+3	; 0x03
 6a0:	8f 93       	push	r24
 6a2:	ff 92       	push	r15
 6a4:	ef 92       	push	r14
 6a6:	57 d0       	rcall	.+174    	; 0x756 <printf>
 6a8:	8e 81       	ldd	r24, Y+6	; 0x06
        printf("gx: %d\r\n", gzRaw);
 6aa:	8f 93       	push	r24
 6ac:	8d 81       	ldd	r24, Y+5	; 0x05
 6ae:	8f 93       	push	r24
 6b0:	1f 93       	push	r17
 6b2:	0f 93       	push	r16
 6b4:	50 d0       	rcall	.+160    	; 0x756 <printf>
 6b6:	87 e3       	ldi	r24, 0x37	; 55

        printf("\r\n");
 6b8:	92 e0       	ldi	r25, 0x02	; 2
 6ba:	60 d0       	rcall	.+192    	; 0x77c <puts>
 6bc:	6b e6       	ldi	r22, 0x6B	; 107
 6be:	7e e6       	ldi	r23, 0x6E	; 110
        delay_ms(10000);
 6c0:	89 e1       	ldi	r24, 0x19	; 25
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	a7 df       	rcall	.-178    	; 0x614 <__portable_avr_delay_cycles>
 6c6:	0f b6       	in	r0, 0x3f	; 63
 6c8:	f8 94       	cli
 6ca:	de bf       	out	0x3e, r29	; 62
 6cc:	0f be       	out	0x3f, r0	; 63
 6ce:	cd bf       	out	0x3d, r28	; 61
 6d0:	d4 cf       	rjmp	.-88     	; 0x67a <main+0x50>

000006d2 <fwrite>:
 6d2:	8f 92       	push	r8
 6d4:	9f 92       	push	r9
 6d6:	af 92       	push	r10
 6d8:	bf 92       	push	r11
 6da:	cf 92       	push	r12
 6dc:	df 92       	push	r13
 6de:	ef 92       	push	r14
 6e0:	ff 92       	push	r15
 6e2:	0f 93       	push	r16
 6e4:	1f 93       	push	r17
 6e6:	cf 93       	push	r28
 6e8:	df 93       	push	r29
 6ea:	5b 01       	movw	r10, r22
 6ec:	4a 01       	movw	r8, r20
 6ee:	79 01       	movw	r14, r18
 6f0:	d9 01       	movw	r26, r18
 6f2:	13 96       	adiw	r26, 0x03	; 3
 6f4:	2c 91       	ld	r18, X
 6f6:	21 ff       	sbrs	r18, 1
 6f8:	1d c0       	rjmp	.+58     	; 0x734 <fwrite+0x62>
 6fa:	c0 e0       	ldi	r28, 0x00	; 0
 6fc:	d0 e0       	ldi	r29, 0x00	; 0
 6fe:	c8 15       	cp	r28, r8
 700:	d9 05       	cpc	r29, r9
 702:	d9 f0       	breq	.+54     	; 0x73a <fwrite+0x68>
 704:	8c 01       	movw	r16, r24
 706:	6c 01       	movw	r12, r24
 708:	ca 0c       	add	r12, r10
 70a:	db 1c       	adc	r13, r11
 70c:	c8 01       	movw	r24, r16
 70e:	0c 15       	cp	r16, r12
 710:	1d 05       	cpc	r17, r13
 712:	71 f0       	breq	.+28     	; 0x730 <fwrite+0x5e>
 714:	0f 5f       	subi	r16, 0xFF	; 255
 716:	1f 4f       	sbci	r17, 0xFF	; 255
 718:	d7 01       	movw	r26, r14
 71a:	18 96       	adiw	r26, 0x08	; 8
 71c:	ed 91       	ld	r30, X+
 71e:	fc 91       	ld	r31, X
 720:	19 97       	sbiw	r26, 0x09	; 9
 722:	b7 01       	movw	r22, r14
 724:	dc 01       	movw	r26, r24
 726:	8c 91       	ld	r24, X
 728:	19 95       	eicall
 72a:	89 2b       	or	r24, r25
 72c:	79 f3       	breq	.-34     	; 0x70c <fwrite+0x3a>
 72e:	05 c0       	rjmp	.+10     	; 0x73a <fwrite+0x68>
 730:	21 96       	adiw	r28, 0x01	; 1
 732:	e5 cf       	rjmp	.-54     	; 0x6fe <fwrite+0x2c>
 734:	80 e0       	ldi	r24, 0x00	; 0
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	01 c0       	rjmp	.+2      	; 0x73c <fwrite+0x6a>
 73a:	ce 01       	movw	r24, r28
 73c:	df 91       	pop	r29
 73e:	cf 91       	pop	r28
 740:	1f 91       	pop	r17
 742:	0f 91       	pop	r16
 744:	ff 90       	pop	r15
 746:	ef 90       	pop	r14
 748:	df 90       	pop	r13
 74a:	cf 90       	pop	r12
 74c:	bf 90       	pop	r11
 74e:	af 90       	pop	r10
 750:	9f 90       	pop	r9
 752:	8f 90       	pop	r8
 754:	08 95       	ret

00000756 <printf>:
 756:	cf 93       	push	r28
 758:	df 93       	push	r29
 75a:	cd b7       	in	r28, 0x3d	; 61
 75c:	de b7       	in	r29, 0x3e	; 62
 75e:	ae 01       	movw	r20, r28
 760:	4a 5f       	subi	r20, 0xFA	; 250
 762:	5f 4f       	sbci	r21, 0xFF	; 255
 764:	fa 01       	movw	r30, r20
 766:	61 91       	ld	r22, Z+
 768:	71 91       	ld	r23, Z+
 76a:	af 01       	movw	r20, r30
 76c:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__iob+0x2>
 770:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__iob+0x3>
 774:	33 d0       	rcall	.+102    	; 0x7dc <vfprintf>
 776:	df 91       	pop	r29
 778:	cf 91       	pop	r28
 77a:	08 95       	ret

0000077c <puts>:
 77c:	0f 93       	push	r16
 77e:	1f 93       	push	r17
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
 784:	e0 91 bc 02 	lds	r30, 0x02BC	; 0x8002bc <__iob+0x2>
 788:	f0 91 bd 02 	lds	r31, 0x02BD	; 0x8002bd <__iob+0x3>
 78c:	23 81       	ldd	r18, Z+3	; 0x03
 78e:	21 ff       	sbrs	r18, 1
 790:	1b c0       	rjmp	.+54     	; 0x7c8 <puts+0x4c>
 792:	8c 01       	movw	r16, r24
 794:	d0 e0       	ldi	r29, 0x00	; 0
 796:	c0 e0       	ldi	r28, 0x00	; 0
 798:	f8 01       	movw	r30, r16
 79a:	81 91       	ld	r24, Z+
 79c:	8f 01       	movw	r16, r30
 79e:	60 91 bc 02 	lds	r22, 0x02BC	; 0x8002bc <__iob+0x2>
 7a2:	70 91 bd 02 	lds	r23, 0x02BD	; 0x8002bd <__iob+0x3>
 7a6:	db 01       	movw	r26, r22
 7a8:	18 96       	adiw	r26, 0x08	; 8
 7aa:	ed 91       	ld	r30, X+
 7ac:	fc 91       	ld	r31, X
 7ae:	19 97       	sbiw	r26, 0x09	; 9
 7b0:	88 23       	and	r24, r24
 7b2:	31 f0       	breq	.+12     	; 0x7c0 <puts+0x44>
 7b4:	19 95       	eicall
 7b6:	89 2b       	or	r24, r25
 7b8:	79 f3       	breq	.-34     	; 0x798 <puts+0x1c>
 7ba:	df ef       	ldi	r29, 0xFF	; 255
 7bc:	cf ef       	ldi	r28, 0xFF	; 255
 7be:	ec cf       	rjmp	.-40     	; 0x798 <puts+0x1c>
 7c0:	8a e0       	ldi	r24, 0x0A	; 10
 7c2:	19 95       	eicall
 7c4:	89 2b       	or	r24, r25
 7c6:	19 f0       	breq	.+6      	; 0x7ce <puts+0x52>
 7c8:	8f ef       	ldi	r24, 0xFF	; 255
 7ca:	9f ef       	ldi	r25, 0xFF	; 255
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <puts+0x56>
 7ce:	8d 2f       	mov	r24, r29
 7d0:	9c 2f       	mov	r25, r28
 7d2:	df 91       	pop	r29
 7d4:	cf 91       	pop	r28
 7d6:	1f 91       	pop	r17
 7d8:	0f 91       	pop	r16
 7da:	08 95       	ret

000007dc <vfprintf>:
 7dc:	2f 92       	push	r2
 7de:	3f 92       	push	r3
 7e0:	4f 92       	push	r4
 7e2:	5f 92       	push	r5
 7e4:	6f 92       	push	r6
 7e6:	7f 92       	push	r7
 7e8:	8f 92       	push	r8
 7ea:	9f 92       	push	r9
 7ec:	af 92       	push	r10
 7ee:	bf 92       	push	r11
 7f0:	cf 92       	push	r12
 7f2:	df 92       	push	r13
 7f4:	ef 92       	push	r14
 7f6:	ff 92       	push	r15
 7f8:	0f 93       	push	r16
 7fa:	1f 93       	push	r17
 7fc:	cf 93       	push	r28
 7fe:	df 93       	push	r29
 800:	cd b7       	in	r28, 0x3d	; 61
 802:	de b7       	in	r29, 0x3e	; 62
 804:	2b 97       	sbiw	r28, 0x0b	; 11
 806:	0f b6       	in	r0, 0x3f	; 63
 808:	f8 94       	cli
 80a:	de bf       	out	0x3e, r29	; 62
 80c:	0f be       	out	0x3f, r0	; 63
 80e:	cd bf       	out	0x3d, r28	; 61
 810:	6c 01       	movw	r12, r24
 812:	7b 01       	movw	r14, r22
 814:	8a 01       	movw	r16, r20
 816:	fc 01       	movw	r30, r24
 818:	17 82       	std	Z+7, r1	; 0x07
 81a:	16 82       	std	Z+6, r1	; 0x06
 81c:	83 81       	ldd	r24, Z+3	; 0x03
 81e:	81 ff       	sbrs	r24, 1
 820:	bf c1       	rjmp	.+894    	; 0xba0 <vfprintf+0x3c4>
 822:	ce 01       	movw	r24, r28
 824:	01 96       	adiw	r24, 0x01	; 1
 826:	3c 01       	movw	r6, r24
 828:	f6 01       	movw	r30, r12
 82a:	93 81       	ldd	r25, Z+3	; 0x03
 82c:	f7 01       	movw	r30, r14
 82e:	93 fd       	sbrc	r25, 3
 830:	85 91       	lpm	r24, Z+
 832:	93 ff       	sbrs	r25, 3
 834:	81 91       	ld	r24, Z+
 836:	7f 01       	movw	r14, r30
 838:	88 23       	and	r24, r24
 83a:	09 f4       	brne	.+2      	; 0x83e <vfprintf+0x62>
 83c:	ad c1       	rjmp	.+858    	; 0xb98 <vfprintf+0x3bc>
 83e:	85 32       	cpi	r24, 0x25	; 37
 840:	39 f4       	brne	.+14     	; 0x850 <vfprintf+0x74>
 842:	93 fd       	sbrc	r25, 3
 844:	85 91       	lpm	r24, Z+
 846:	93 ff       	sbrs	r25, 3
 848:	81 91       	ld	r24, Z+
 84a:	7f 01       	movw	r14, r30
 84c:	85 32       	cpi	r24, 0x25	; 37
 84e:	21 f4       	brne	.+8      	; 0x858 <vfprintf+0x7c>
 850:	b6 01       	movw	r22, r12
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	d6 d1       	rcall	.+940    	; 0xc02 <fputc>
 856:	e8 cf       	rjmp	.-48     	; 0x828 <vfprintf+0x4c>
 858:	91 2c       	mov	r9, r1
 85a:	21 2c       	mov	r2, r1
 85c:	31 2c       	mov	r3, r1
 85e:	ff e1       	ldi	r31, 0x1F	; 31
 860:	f3 15       	cp	r31, r3
 862:	d8 f0       	brcs	.+54     	; 0x89a <vfprintf+0xbe>
 864:	8b 32       	cpi	r24, 0x2B	; 43
 866:	79 f0       	breq	.+30     	; 0x886 <vfprintf+0xaa>
 868:	38 f4       	brcc	.+14     	; 0x878 <vfprintf+0x9c>
 86a:	80 32       	cpi	r24, 0x20	; 32
 86c:	79 f0       	breq	.+30     	; 0x88c <vfprintf+0xb0>
 86e:	83 32       	cpi	r24, 0x23	; 35
 870:	a1 f4       	brne	.+40     	; 0x89a <vfprintf+0xbe>
 872:	23 2d       	mov	r18, r3
 874:	20 61       	ori	r18, 0x10	; 16
 876:	1d c0       	rjmp	.+58     	; 0x8b2 <vfprintf+0xd6>
 878:	8d 32       	cpi	r24, 0x2D	; 45
 87a:	61 f0       	breq	.+24     	; 0x894 <vfprintf+0xb8>
 87c:	80 33       	cpi	r24, 0x30	; 48
 87e:	69 f4       	brne	.+26     	; 0x89a <vfprintf+0xbe>
 880:	23 2d       	mov	r18, r3
 882:	21 60       	ori	r18, 0x01	; 1
 884:	16 c0       	rjmp	.+44     	; 0x8b2 <vfprintf+0xd6>
 886:	83 2d       	mov	r24, r3
 888:	82 60       	ori	r24, 0x02	; 2
 88a:	38 2e       	mov	r3, r24
 88c:	e3 2d       	mov	r30, r3
 88e:	e4 60       	ori	r30, 0x04	; 4
 890:	3e 2e       	mov	r3, r30
 892:	2a c0       	rjmp	.+84     	; 0x8e8 <vfprintf+0x10c>
 894:	f3 2d       	mov	r31, r3
 896:	f8 60       	ori	r31, 0x08	; 8
 898:	1d c0       	rjmp	.+58     	; 0x8d4 <vfprintf+0xf8>
 89a:	37 fc       	sbrc	r3, 7
 89c:	2d c0       	rjmp	.+90     	; 0x8f8 <vfprintf+0x11c>
 89e:	20 ed       	ldi	r18, 0xD0	; 208
 8a0:	28 0f       	add	r18, r24
 8a2:	2a 30       	cpi	r18, 0x0A	; 10
 8a4:	40 f0       	brcs	.+16     	; 0x8b6 <vfprintf+0xda>
 8a6:	8e 32       	cpi	r24, 0x2E	; 46
 8a8:	b9 f4       	brne	.+46     	; 0x8d8 <vfprintf+0xfc>
 8aa:	36 fc       	sbrc	r3, 6
 8ac:	75 c1       	rjmp	.+746    	; 0xb98 <vfprintf+0x3bc>
 8ae:	23 2d       	mov	r18, r3
 8b0:	20 64       	ori	r18, 0x40	; 64
 8b2:	32 2e       	mov	r3, r18
 8b4:	19 c0       	rjmp	.+50     	; 0x8e8 <vfprintf+0x10c>
 8b6:	36 fe       	sbrs	r3, 6
 8b8:	06 c0       	rjmp	.+12     	; 0x8c6 <vfprintf+0xea>
 8ba:	8a e0       	ldi	r24, 0x0A	; 10
 8bc:	98 9e       	mul	r9, r24
 8be:	20 0d       	add	r18, r0
 8c0:	11 24       	eor	r1, r1
 8c2:	92 2e       	mov	r9, r18
 8c4:	11 c0       	rjmp	.+34     	; 0x8e8 <vfprintf+0x10c>
 8c6:	ea e0       	ldi	r30, 0x0A	; 10
 8c8:	2e 9e       	mul	r2, r30
 8ca:	20 0d       	add	r18, r0
 8cc:	11 24       	eor	r1, r1
 8ce:	22 2e       	mov	r2, r18
 8d0:	f3 2d       	mov	r31, r3
 8d2:	f0 62       	ori	r31, 0x20	; 32
 8d4:	3f 2e       	mov	r3, r31
 8d6:	08 c0       	rjmp	.+16     	; 0x8e8 <vfprintf+0x10c>
 8d8:	8c 36       	cpi	r24, 0x6C	; 108
 8da:	21 f4       	brne	.+8      	; 0x8e4 <vfprintf+0x108>
 8dc:	83 2d       	mov	r24, r3
 8de:	80 68       	ori	r24, 0x80	; 128
 8e0:	38 2e       	mov	r3, r24
 8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <vfprintf+0x10c>
 8e4:	88 36       	cpi	r24, 0x68	; 104
 8e6:	41 f4       	brne	.+16     	; 0x8f8 <vfprintf+0x11c>
 8e8:	f7 01       	movw	r30, r14
 8ea:	93 fd       	sbrc	r25, 3
 8ec:	85 91       	lpm	r24, Z+
 8ee:	93 ff       	sbrs	r25, 3
 8f0:	81 91       	ld	r24, Z+
 8f2:	7f 01       	movw	r14, r30
 8f4:	81 11       	cpse	r24, r1
 8f6:	b3 cf       	rjmp	.-154    	; 0x85e <vfprintf+0x82>
 8f8:	98 2f       	mov	r25, r24
 8fa:	9f 7d       	andi	r25, 0xDF	; 223
 8fc:	95 54       	subi	r25, 0x45	; 69
 8fe:	93 30       	cpi	r25, 0x03	; 3
 900:	28 f4       	brcc	.+10     	; 0x90c <vfprintf+0x130>
 902:	0c 5f       	subi	r16, 0xFC	; 252
 904:	1f 4f       	sbci	r17, 0xFF	; 255
 906:	9f e3       	ldi	r25, 0x3F	; 63
 908:	99 83       	std	Y+1, r25	; 0x01
 90a:	0d c0       	rjmp	.+26     	; 0x926 <vfprintf+0x14a>
 90c:	83 36       	cpi	r24, 0x63	; 99
 90e:	31 f0       	breq	.+12     	; 0x91c <vfprintf+0x140>
 910:	83 37       	cpi	r24, 0x73	; 115
 912:	71 f0       	breq	.+28     	; 0x930 <vfprintf+0x154>
 914:	83 35       	cpi	r24, 0x53	; 83
 916:	09 f0       	breq	.+2      	; 0x91a <vfprintf+0x13e>
 918:	55 c0       	rjmp	.+170    	; 0x9c4 <vfprintf+0x1e8>
 91a:	20 c0       	rjmp	.+64     	; 0x95c <vfprintf+0x180>
 91c:	f8 01       	movw	r30, r16
 91e:	80 81       	ld	r24, Z
 920:	89 83       	std	Y+1, r24	; 0x01
 922:	0e 5f       	subi	r16, 0xFE	; 254
 924:	1f 4f       	sbci	r17, 0xFF	; 255
 926:	88 24       	eor	r8, r8
 928:	83 94       	inc	r8
 92a:	91 2c       	mov	r9, r1
 92c:	53 01       	movw	r10, r6
 92e:	12 c0       	rjmp	.+36     	; 0x954 <vfprintf+0x178>
 930:	28 01       	movw	r4, r16
 932:	f2 e0       	ldi	r31, 0x02	; 2
 934:	4f 0e       	add	r4, r31
 936:	51 1c       	adc	r5, r1
 938:	f8 01       	movw	r30, r16
 93a:	a0 80       	ld	r10, Z
 93c:	b1 80       	ldd	r11, Z+1	; 0x01
 93e:	36 fe       	sbrs	r3, 6
 940:	03 c0       	rjmp	.+6      	; 0x948 <vfprintf+0x16c>
 942:	69 2d       	mov	r22, r9
 944:	70 e0       	ldi	r23, 0x00	; 0
 946:	02 c0       	rjmp	.+4      	; 0x94c <vfprintf+0x170>
 948:	6f ef       	ldi	r22, 0xFF	; 255
 94a:	7f ef       	ldi	r23, 0xFF	; 255
 94c:	c5 01       	movw	r24, r10
 94e:	4e d1       	rcall	.+668    	; 0xbec <strnlen>
 950:	4c 01       	movw	r8, r24
 952:	82 01       	movw	r16, r4
 954:	f3 2d       	mov	r31, r3
 956:	ff 77       	andi	r31, 0x7F	; 127
 958:	3f 2e       	mov	r3, r31
 95a:	15 c0       	rjmp	.+42     	; 0x986 <vfprintf+0x1aa>
 95c:	28 01       	movw	r4, r16
 95e:	22 e0       	ldi	r18, 0x02	; 2
 960:	42 0e       	add	r4, r18
 962:	51 1c       	adc	r5, r1
 964:	f8 01       	movw	r30, r16
 966:	a0 80       	ld	r10, Z
 968:	b1 80       	ldd	r11, Z+1	; 0x01
 96a:	36 fe       	sbrs	r3, 6
 96c:	03 c0       	rjmp	.+6      	; 0x974 <vfprintf+0x198>
 96e:	69 2d       	mov	r22, r9
 970:	70 e0       	ldi	r23, 0x00	; 0
 972:	02 c0       	rjmp	.+4      	; 0x978 <vfprintf+0x19c>
 974:	6f ef       	ldi	r22, 0xFF	; 255
 976:	7f ef       	ldi	r23, 0xFF	; 255
 978:	c5 01       	movw	r24, r10
 97a:	2d d1       	rcall	.+602    	; 0xbd6 <strnlen_P>
 97c:	4c 01       	movw	r8, r24
 97e:	f3 2d       	mov	r31, r3
 980:	f0 68       	ori	r31, 0x80	; 128
 982:	3f 2e       	mov	r3, r31
 984:	82 01       	movw	r16, r4
 986:	33 fc       	sbrc	r3, 3
 988:	19 c0       	rjmp	.+50     	; 0x9bc <vfprintf+0x1e0>
 98a:	82 2d       	mov	r24, r2
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	88 16       	cp	r8, r24
 990:	99 06       	cpc	r9, r25
 992:	a0 f4       	brcc	.+40     	; 0x9bc <vfprintf+0x1e0>
 994:	b6 01       	movw	r22, r12
 996:	80 e2       	ldi	r24, 0x20	; 32
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	33 d1       	rcall	.+614    	; 0xc02 <fputc>
 99c:	2a 94       	dec	r2
 99e:	f5 cf       	rjmp	.-22     	; 0x98a <vfprintf+0x1ae>
 9a0:	f5 01       	movw	r30, r10
 9a2:	37 fc       	sbrc	r3, 7
 9a4:	85 91       	lpm	r24, Z+
 9a6:	37 fe       	sbrs	r3, 7
 9a8:	81 91       	ld	r24, Z+
 9aa:	5f 01       	movw	r10, r30
 9ac:	b6 01       	movw	r22, r12
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	28 d1       	rcall	.+592    	; 0xc02 <fputc>
 9b2:	21 10       	cpse	r2, r1
 9b4:	2a 94       	dec	r2
 9b6:	21 e0       	ldi	r18, 0x01	; 1
 9b8:	82 1a       	sub	r8, r18
 9ba:	91 08       	sbc	r9, r1
 9bc:	81 14       	cp	r8, r1
 9be:	91 04       	cpc	r9, r1
 9c0:	79 f7       	brne	.-34     	; 0x9a0 <vfprintf+0x1c4>
 9c2:	e1 c0       	rjmp	.+450    	; 0xb86 <vfprintf+0x3aa>
 9c4:	84 36       	cpi	r24, 0x64	; 100
 9c6:	11 f0       	breq	.+4      	; 0x9cc <vfprintf+0x1f0>
 9c8:	89 36       	cpi	r24, 0x69	; 105
 9ca:	39 f5       	brne	.+78     	; 0xa1a <vfprintf+0x23e>
 9cc:	f8 01       	movw	r30, r16
 9ce:	37 fe       	sbrs	r3, 7
 9d0:	07 c0       	rjmp	.+14     	; 0x9e0 <vfprintf+0x204>
 9d2:	60 81       	ld	r22, Z
 9d4:	71 81       	ldd	r23, Z+1	; 0x01
 9d6:	82 81       	ldd	r24, Z+2	; 0x02
 9d8:	93 81       	ldd	r25, Z+3	; 0x03
 9da:	0c 5f       	subi	r16, 0xFC	; 252
 9dc:	1f 4f       	sbci	r17, 0xFF	; 255
 9de:	08 c0       	rjmp	.+16     	; 0x9f0 <vfprintf+0x214>
 9e0:	60 81       	ld	r22, Z
 9e2:	71 81       	ldd	r23, Z+1	; 0x01
 9e4:	07 2e       	mov	r0, r23
 9e6:	00 0c       	add	r0, r0
 9e8:	88 0b       	sbc	r24, r24
 9ea:	99 0b       	sbc	r25, r25
 9ec:	0e 5f       	subi	r16, 0xFE	; 254
 9ee:	1f 4f       	sbci	r17, 0xFF	; 255
 9f0:	f3 2d       	mov	r31, r3
 9f2:	ff 76       	andi	r31, 0x6F	; 111
 9f4:	3f 2e       	mov	r3, r31
 9f6:	97 ff       	sbrs	r25, 7
 9f8:	09 c0       	rjmp	.+18     	; 0xa0c <vfprintf+0x230>
 9fa:	90 95       	com	r25
 9fc:	80 95       	com	r24
 9fe:	70 95       	com	r23
 a00:	61 95       	neg	r22
 a02:	7f 4f       	sbci	r23, 0xFF	; 255
 a04:	8f 4f       	sbci	r24, 0xFF	; 255
 a06:	9f 4f       	sbci	r25, 0xFF	; 255
 a08:	f0 68       	ori	r31, 0x80	; 128
 a0a:	3f 2e       	mov	r3, r31
 a0c:	2a e0       	ldi	r18, 0x0A	; 10
 a0e:	30 e0       	ldi	r19, 0x00	; 0
 a10:	a3 01       	movw	r20, r6
 a12:	33 d1       	rcall	.+614    	; 0xc7a <__ultoa_invert>
 a14:	88 2e       	mov	r8, r24
 a16:	86 18       	sub	r8, r6
 a18:	44 c0       	rjmp	.+136    	; 0xaa2 <vfprintf+0x2c6>
 a1a:	85 37       	cpi	r24, 0x75	; 117
 a1c:	31 f4       	brne	.+12     	; 0xa2a <vfprintf+0x24e>
 a1e:	23 2d       	mov	r18, r3
 a20:	2f 7e       	andi	r18, 0xEF	; 239
 a22:	b2 2e       	mov	r11, r18
 a24:	2a e0       	ldi	r18, 0x0A	; 10
 a26:	30 e0       	ldi	r19, 0x00	; 0
 a28:	25 c0       	rjmp	.+74     	; 0xa74 <vfprintf+0x298>
 a2a:	93 2d       	mov	r25, r3
 a2c:	99 7f       	andi	r25, 0xF9	; 249
 a2e:	b9 2e       	mov	r11, r25
 a30:	8f 36       	cpi	r24, 0x6F	; 111
 a32:	c1 f0       	breq	.+48     	; 0xa64 <vfprintf+0x288>
 a34:	18 f4       	brcc	.+6      	; 0xa3c <vfprintf+0x260>
 a36:	88 35       	cpi	r24, 0x58	; 88
 a38:	79 f0       	breq	.+30     	; 0xa58 <vfprintf+0x27c>
 a3a:	ae c0       	rjmp	.+348    	; 0xb98 <vfprintf+0x3bc>
 a3c:	80 37       	cpi	r24, 0x70	; 112
 a3e:	19 f0       	breq	.+6      	; 0xa46 <vfprintf+0x26a>
 a40:	88 37       	cpi	r24, 0x78	; 120
 a42:	21 f0       	breq	.+8      	; 0xa4c <vfprintf+0x270>
 a44:	a9 c0       	rjmp	.+338    	; 0xb98 <vfprintf+0x3bc>
 a46:	e9 2f       	mov	r30, r25
 a48:	e0 61       	ori	r30, 0x10	; 16
 a4a:	be 2e       	mov	r11, r30
 a4c:	b4 fe       	sbrs	r11, 4
 a4e:	0d c0       	rjmp	.+26     	; 0xa6a <vfprintf+0x28e>
 a50:	fb 2d       	mov	r31, r11
 a52:	f4 60       	ori	r31, 0x04	; 4
 a54:	bf 2e       	mov	r11, r31
 a56:	09 c0       	rjmp	.+18     	; 0xa6a <vfprintf+0x28e>
 a58:	34 fe       	sbrs	r3, 4
 a5a:	0a c0       	rjmp	.+20     	; 0xa70 <vfprintf+0x294>
 a5c:	29 2f       	mov	r18, r25
 a5e:	26 60       	ori	r18, 0x06	; 6
 a60:	b2 2e       	mov	r11, r18
 a62:	06 c0       	rjmp	.+12     	; 0xa70 <vfprintf+0x294>
 a64:	28 e0       	ldi	r18, 0x08	; 8
 a66:	30 e0       	ldi	r19, 0x00	; 0
 a68:	05 c0       	rjmp	.+10     	; 0xa74 <vfprintf+0x298>
 a6a:	20 e1       	ldi	r18, 0x10	; 16
 a6c:	30 e0       	ldi	r19, 0x00	; 0
 a6e:	02 c0       	rjmp	.+4      	; 0xa74 <vfprintf+0x298>
 a70:	20 e1       	ldi	r18, 0x10	; 16
 a72:	32 e0       	ldi	r19, 0x02	; 2
 a74:	f8 01       	movw	r30, r16
 a76:	b7 fe       	sbrs	r11, 7
 a78:	07 c0       	rjmp	.+14     	; 0xa88 <vfprintf+0x2ac>
 a7a:	60 81       	ld	r22, Z
 a7c:	71 81       	ldd	r23, Z+1	; 0x01
 a7e:	82 81       	ldd	r24, Z+2	; 0x02
 a80:	93 81       	ldd	r25, Z+3	; 0x03
 a82:	0c 5f       	subi	r16, 0xFC	; 252
 a84:	1f 4f       	sbci	r17, 0xFF	; 255
 a86:	06 c0       	rjmp	.+12     	; 0xa94 <vfprintf+0x2b8>
 a88:	60 81       	ld	r22, Z
 a8a:	71 81       	ldd	r23, Z+1	; 0x01
 a8c:	80 e0       	ldi	r24, 0x00	; 0
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	0e 5f       	subi	r16, 0xFE	; 254
 a92:	1f 4f       	sbci	r17, 0xFF	; 255
 a94:	a3 01       	movw	r20, r6
 a96:	f1 d0       	rcall	.+482    	; 0xc7a <__ultoa_invert>
 a98:	88 2e       	mov	r8, r24
 a9a:	86 18       	sub	r8, r6
 a9c:	fb 2d       	mov	r31, r11
 a9e:	ff 77       	andi	r31, 0x7F	; 127
 aa0:	3f 2e       	mov	r3, r31
 aa2:	36 fe       	sbrs	r3, 6
 aa4:	0d c0       	rjmp	.+26     	; 0xac0 <vfprintf+0x2e4>
 aa6:	23 2d       	mov	r18, r3
 aa8:	2e 7f       	andi	r18, 0xFE	; 254
 aaa:	a2 2e       	mov	r10, r18
 aac:	89 14       	cp	r8, r9
 aae:	58 f4       	brcc	.+22     	; 0xac6 <vfprintf+0x2ea>
 ab0:	34 fe       	sbrs	r3, 4
 ab2:	0b c0       	rjmp	.+22     	; 0xaca <vfprintf+0x2ee>
 ab4:	32 fc       	sbrc	r3, 2
 ab6:	09 c0       	rjmp	.+18     	; 0xaca <vfprintf+0x2ee>
 ab8:	83 2d       	mov	r24, r3
 aba:	8e 7e       	andi	r24, 0xEE	; 238
 abc:	a8 2e       	mov	r10, r24
 abe:	05 c0       	rjmp	.+10     	; 0xaca <vfprintf+0x2ee>
 ac0:	b8 2c       	mov	r11, r8
 ac2:	a3 2c       	mov	r10, r3
 ac4:	03 c0       	rjmp	.+6      	; 0xacc <vfprintf+0x2f0>
 ac6:	b8 2c       	mov	r11, r8
 ac8:	01 c0       	rjmp	.+2      	; 0xacc <vfprintf+0x2f0>
 aca:	b9 2c       	mov	r11, r9
 acc:	a4 fe       	sbrs	r10, 4
 ace:	0f c0       	rjmp	.+30     	; 0xaee <vfprintf+0x312>
 ad0:	fe 01       	movw	r30, r28
 ad2:	e8 0d       	add	r30, r8
 ad4:	f1 1d       	adc	r31, r1
 ad6:	80 81       	ld	r24, Z
 ad8:	80 33       	cpi	r24, 0x30	; 48
 ada:	21 f4       	brne	.+8      	; 0xae4 <vfprintf+0x308>
 adc:	9a 2d       	mov	r25, r10
 ade:	99 7e       	andi	r25, 0xE9	; 233
 ae0:	a9 2e       	mov	r10, r25
 ae2:	09 c0       	rjmp	.+18     	; 0xaf6 <vfprintf+0x31a>
 ae4:	a2 fe       	sbrs	r10, 2
 ae6:	06 c0       	rjmp	.+12     	; 0xaf4 <vfprintf+0x318>
 ae8:	b3 94       	inc	r11
 aea:	b3 94       	inc	r11
 aec:	04 c0       	rjmp	.+8      	; 0xaf6 <vfprintf+0x31a>
 aee:	8a 2d       	mov	r24, r10
 af0:	86 78       	andi	r24, 0x86	; 134
 af2:	09 f0       	breq	.+2      	; 0xaf6 <vfprintf+0x31a>
 af4:	b3 94       	inc	r11
 af6:	a3 fc       	sbrc	r10, 3
 af8:	10 c0       	rjmp	.+32     	; 0xb1a <vfprintf+0x33e>
 afa:	a0 fe       	sbrs	r10, 0
 afc:	06 c0       	rjmp	.+12     	; 0xb0a <vfprintf+0x32e>
 afe:	b2 14       	cp	r11, r2
 b00:	80 f4       	brcc	.+32     	; 0xb22 <vfprintf+0x346>
 b02:	28 0c       	add	r2, r8
 b04:	92 2c       	mov	r9, r2
 b06:	9b 18       	sub	r9, r11
 b08:	0d c0       	rjmp	.+26     	; 0xb24 <vfprintf+0x348>
 b0a:	b2 14       	cp	r11, r2
 b0c:	58 f4       	brcc	.+22     	; 0xb24 <vfprintf+0x348>
 b0e:	b6 01       	movw	r22, r12
 b10:	80 e2       	ldi	r24, 0x20	; 32
 b12:	90 e0       	ldi	r25, 0x00	; 0
 b14:	76 d0       	rcall	.+236    	; 0xc02 <fputc>
 b16:	b3 94       	inc	r11
 b18:	f8 cf       	rjmp	.-16     	; 0xb0a <vfprintf+0x32e>
 b1a:	b2 14       	cp	r11, r2
 b1c:	18 f4       	brcc	.+6      	; 0xb24 <vfprintf+0x348>
 b1e:	2b 18       	sub	r2, r11
 b20:	02 c0       	rjmp	.+4      	; 0xb26 <vfprintf+0x34a>
 b22:	98 2c       	mov	r9, r8
 b24:	21 2c       	mov	r2, r1
 b26:	a4 fe       	sbrs	r10, 4
 b28:	0f c0       	rjmp	.+30     	; 0xb48 <vfprintf+0x36c>
 b2a:	b6 01       	movw	r22, r12
 b2c:	80 e3       	ldi	r24, 0x30	; 48
 b2e:	90 e0       	ldi	r25, 0x00	; 0
 b30:	68 d0       	rcall	.+208    	; 0xc02 <fputc>
 b32:	a2 fe       	sbrs	r10, 2
 b34:	16 c0       	rjmp	.+44     	; 0xb62 <vfprintf+0x386>
 b36:	a1 fc       	sbrc	r10, 1
 b38:	03 c0       	rjmp	.+6      	; 0xb40 <vfprintf+0x364>
 b3a:	88 e7       	ldi	r24, 0x78	; 120
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	02 c0       	rjmp	.+4      	; 0xb44 <vfprintf+0x368>
 b40:	88 e5       	ldi	r24, 0x58	; 88
 b42:	90 e0       	ldi	r25, 0x00	; 0
 b44:	b6 01       	movw	r22, r12
 b46:	0c c0       	rjmp	.+24     	; 0xb60 <vfprintf+0x384>
 b48:	8a 2d       	mov	r24, r10
 b4a:	86 78       	andi	r24, 0x86	; 134
 b4c:	51 f0       	breq	.+20     	; 0xb62 <vfprintf+0x386>
 b4e:	a1 fe       	sbrs	r10, 1
 b50:	02 c0       	rjmp	.+4      	; 0xb56 <vfprintf+0x37a>
 b52:	8b e2       	ldi	r24, 0x2B	; 43
 b54:	01 c0       	rjmp	.+2      	; 0xb58 <vfprintf+0x37c>
 b56:	80 e2       	ldi	r24, 0x20	; 32
 b58:	a7 fc       	sbrc	r10, 7
 b5a:	8d e2       	ldi	r24, 0x2D	; 45
 b5c:	b6 01       	movw	r22, r12
 b5e:	90 e0       	ldi	r25, 0x00	; 0
 b60:	50 d0       	rcall	.+160    	; 0xc02 <fputc>
 b62:	89 14       	cp	r8, r9
 b64:	30 f4       	brcc	.+12     	; 0xb72 <vfprintf+0x396>
 b66:	b6 01       	movw	r22, r12
 b68:	80 e3       	ldi	r24, 0x30	; 48
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	4a d0       	rcall	.+148    	; 0xc02 <fputc>
 b6e:	9a 94       	dec	r9
 b70:	f8 cf       	rjmp	.-16     	; 0xb62 <vfprintf+0x386>
 b72:	8a 94       	dec	r8
 b74:	f3 01       	movw	r30, r6
 b76:	e8 0d       	add	r30, r8
 b78:	f1 1d       	adc	r31, r1
 b7a:	80 81       	ld	r24, Z
 b7c:	b6 01       	movw	r22, r12
 b7e:	90 e0       	ldi	r25, 0x00	; 0
 b80:	40 d0       	rcall	.+128    	; 0xc02 <fputc>
 b82:	81 10       	cpse	r8, r1
 b84:	f6 cf       	rjmp	.-20     	; 0xb72 <vfprintf+0x396>
 b86:	22 20       	and	r2, r2
 b88:	09 f4       	brne	.+2      	; 0xb8c <vfprintf+0x3b0>
 b8a:	4e ce       	rjmp	.-868    	; 0x828 <vfprintf+0x4c>
 b8c:	b6 01       	movw	r22, r12
 b8e:	80 e2       	ldi	r24, 0x20	; 32
 b90:	90 e0       	ldi	r25, 0x00	; 0
 b92:	37 d0       	rcall	.+110    	; 0xc02 <fputc>
 b94:	2a 94       	dec	r2
 b96:	f7 cf       	rjmp	.-18     	; 0xb86 <vfprintf+0x3aa>
 b98:	f6 01       	movw	r30, r12
 b9a:	86 81       	ldd	r24, Z+6	; 0x06
 b9c:	97 81       	ldd	r25, Z+7	; 0x07
 b9e:	02 c0       	rjmp	.+4      	; 0xba4 <vfprintf+0x3c8>
 ba0:	8f ef       	ldi	r24, 0xFF	; 255
 ba2:	9f ef       	ldi	r25, 0xFF	; 255
 ba4:	2b 96       	adiw	r28, 0x0b	; 11
 ba6:	0f b6       	in	r0, 0x3f	; 63
 ba8:	f8 94       	cli
 baa:	de bf       	out	0x3e, r29	; 62
 bac:	0f be       	out	0x3f, r0	; 63
 bae:	cd bf       	out	0x3d, r28	; 61
 bb0:	df 91       	pop	r29
 bb2:	cf 91       	pop	r28
 bb4:	1f 91       	pop	r17
 bb6:	0f 91       	pop	r16
 bb8:	ff 90       	pop	r15
 bba:	ef 90       	pop	r14
 bbc:	df 90       	pop	r13
 bbe:	cf 90       	pop	r12
 bc0:	bf 90       	pop	r11
 bc2:	af 90       	pop	r10
 bc4:	9f 90       	pop	r9
 bc6:	8f 90       	pop	r8
 bc8:	7f 90       	pop	r7
 bca:	6f 90       	pop	r6
 bcc:	5f 90       	pop	r5
 bce:	4f 90       	pop	r4
 bd0:	3f 90       	pop	r3
 bd2:	2f 90       	pop	r2
 bd4:	08 95       	ret

00000bd6 <strnlen_P>:
 bd6:	fc 01       	movw	r30, r24
 bd8:	05 90       	lpm	r0, Z+
 bda:	61 50       	subi	r22, 0x01	; 1
 bdc:	70 40       	sbci	r23, 0x00	; 0
 bde:	01 10       	cpse	r0, r1
 be0:	d8 f7       	brcc	.-10     	; 0xbd8 <strnlen_P+0x2>
 be2:	80 95       	com	r24
 be4:	90 95       	com	r25
 be6:	8e 0f       	add	r24, r30
 be8:	9f 1f       	adc	r25, r31
 bea:	08 95       	ret

00000bec <strnlen>:
 bec:	fc 01       	movw	r30, r24
 bee:	61 50       	subi	r22, 0x01	; 1
 bf0:	70 40       	sbci	r23, 0x00	; 0
 bf2:	01 90       	ld	r0, Z+
 bf4:	01 10       	cpse	r0, r1
 bf6:	d8 f7       	brcc	.-10     	; 0xbee <strnlen+0x2>
 bf8:	80 95       	com	r24
 bfa:	90 95       	com	r25
 bfc:	8e 0f       	add	r24, r30
 bfe:	9f 1f       	adc	r25, r31
 c00:	08 95       	ret

00000c02 <fputc>:
 c02:	0f 93       	push	r16
 c04:	1f 93       	push	r17
 c06:	cf 93       	push	r28
 c08:	df 93       	push	r29
 c0a:	fb 01       	movw	r30, r22
 c0c:	23 81       	ldd	r18, Z+3	; 0x03
 c0e:	21 fd       	sbrc	r18, 1
 c10:	03 c0       	rjmp	.+6      	; 0xc18 <fputc+0x16>
 c12:	8f ef       	ldi	r24, 0xFF	; 255
 c14:	9f ef       	ldi	r25, 0xFF	; 255
 c16:	2c c0       	rjmp	.+88     	; 0xc70 <fputc+0x6e>
 c18:	22 ff       	sbrs	r18, 2
 c1a:	16 c0       	rjmp	.+44     	; 0xc48 <fputc+0x46>
 c1c:	46 81       	ldd	r20, Z+6	; 0x06
 c1e:	57 81       	ldd	r21, Z+7	; 0x07
 c20:	24 81       	ldd	r18, Z+4	; 0x04
 c22:	35 81       	ldd	r19, Z+5	; 0x05
 c24:	42 17       	cp	r20, r18
 c26:	53 07       	cpc	r21, r19
 c28:	44 f4       	brge	.+16     	; 0xc3a <fputc+0x38>
 c2a:	a0 81       	ld	r26, Z
 c2c:	b1 81       	ldd	r27, Z+1	; 0x01
 c2e:	9d 01       	movw	r18, r26
 c30:	2f 5f       	subi	r18, 0xFF	; 255
 c32:	3f 4f       	sbci	r19, 0xFF	; 255
 c34:	31 83       	std	Z+1, r19	; 0x01
 c36:	20 83       	st	Z, r18
 c38:	8c 93       	st	X, r24
 c3a:	26 81       	ldd	r18, Z+6	; 0x06
 c3c:	37 81       	ldd	r19, Z+7	; 0x07
 c3e:	2f 5f       	subi	r18, 0xFF	; 255
 c40:	3f 4f       	sbci	r19, 0xFF	; 255
 c42:	37 83       	std	Z+7, r19	; 0x07
 c44:	26 83       	std	Z+6, r18	; 0x06
 c46:	14 c0       	rjmp	.+40     	; 0xc70 <fputc+0x6e>
 c48:	8b 01       	movw	r16, r22
 c4a:	ec 01       	movw	r28, r24
 c4c:	fb 01       	movw	r30, r22
 c4e:	00 84       	ldd	r0, Z+8	; 0x08
 c50:	f1 85       	ldd	r31, Z+9	; 0x09
 c52:	e0 2d       	mov	r30, r0
 c54:	19 95       	eicall
 c56:	89 2b       	or	r24, r25
 c58:	e1 f6       	brne	.-72     	; 0xc12 <fputc+0x10>
 c5a:	d8 01       	movw	r26, r16
 c5c:	16 96       	adiw	r26, 0x06	; 6
 c5e:	8d 91       	ld	r24, X+
 c60:	9c 91       	ld	r25, X
 c62:	17 97       	sbiw	r26, 0x07	; 7
 c64:	01 96       	adiw	r24, 0x01	; 1
 c66:	17 96       	adiw	r26, 0x07	; 7
 c68:	9c 93       	st	X, r25
 c6a:	8e 93       	st	-X, r24
 c6c:	16 97       	sbiw	r26, 0x06	; 6
 c6e:	ce 01       	movw	r24, r28
 c70:	df 91       	pop	r29
 c72:	cf 91       	pop	r28
 c74:	1f 91       	pop	r17
 c76:	0f 91       	pop	r16
 c78:	08 95       	ret

00000c7a <__ultoa_invert>:
 c7a:	fa 01       	movw	r30, r20
 c7c:	aa 27       	eor	r26, r26
 c7e:	28 30       	cpi	r18, 0x08	; 8
 c80:	51 f1       	breq	.+84     	; 0xcd6 <__ultoa_invert+0x5c>
 c82:	20 31       	cpi	r18, 0x10	; 16
 c84:	81 f1       	breq	.+96     	; 0xce6 <__ultoa_invert+0x6c>
 c86:	e8 94       	clt
 c88:	6f 93       	push	r22
 c8a:	6e 7f       	andi	r22, 0xFE	; 254
 c8c:	6e 5f       	subi	r22, 0xFE	; 254
 c8e:	7f 4f       	sbci	r23, 0xFF	; 255
 c90:	8f 4f       	sbci	r24, 0xFF	; 255
 c92:	9f 4f       	sbci	r25, 0xFF	; 255
 c94:	af 4f       	sbci	r26, 0xFF	; 255
 c96:	b1 e0       	ldi	r27, 0x01	; 1
 c98:	3e d0       	rcall	.+124    	; 0xd16 <__ultoa_invert+0x9c>
 c9a:	b4 e0       	ldi	r27, 0x04	; 4
 c9c:	3c d0       	rcall	.+120    	; 0xd16 <__ultoa_invert+0x9c>
 c9e:	67 0f       	add	r22, r23
 ca0:	78 1f       	adc	r23, r24
 ca2:	89 1f       	adc	r24, r25
 ca4:	9a 1f       	adc	r25, r26
 ca6:	a1 1d       	adc	r26, r1
 ca8:	68 0f       	add	r22, r24
 caa:	79 1f       	adc	r23, r25
 cac:	8a 1f       	adc	r24, r26
 cae:	91 1d       	adc	r25, r1
 cb0:	a1 1d       	adc	r26, r1
 cb2:	6a 0f       	add	r22, r26
 cb4:	71 1d       	adc	r23, r1
 cb6:	81 1d       	adc	r24, r1
 cb8:	91 1d       	adc	r25, r1
 cba:	a1 1d       	adc	r26, r1
 cbc:	20 d0       	rcall	.+64     	; 0xcfe <__ultoa_invert+0x84>
 cbe:	09 f4       	brne	.+2      	; 0xcc2 <__ultoa_invert+0x48>
 cc0:	68 94       	set
 cc2:	3f 91       	pop	r19
 cc4:	2a e0       	ldi	r18, 0x0A	; 10
 cc6:	26 9f       	mul	r18, r22
 cc8:	11 24       	eor	r1, r1
 cca:	30 19       	sub	r19, r0
 ccc:	30 5d       	subi	r19, 0xD0	; 208
 cce:	31 93       	st	Z+, r19
 cd0:	de f6       	brtc	.-74     	; 0xc88 <__ultoa_invert+0xe>
 cd2:	cf 01       	movw	r24, r30
 cd4:	08 95       	ret
 cd6:	46 2f       	mov	r20, r22
 cd8:	47 70       	andi	r20, 0x07	; 7
 cda:	40 5d       	subi	r20, 0xD0	; 208
 cdc:	41 93       	st	Z+, r20
 cde:	b3 e0       	ldi	r27, 0x03	; 3
 ce0:	0f d0       	rcall	.+30     	; 0xd00 <__ultoa_invert+0x86>
 ce2:	c9 f7       	brne	.-14     	; 0xcd6 <__ultoa_invert+0x5c>
 ce4:	f6 cf       	rjmp	.-20     	; 0xcd2 <__ultoa_invert+0x58>
 ce6:	46 2f       	mov	r20, r22
 ce8:	4f 70       	andi	r20, 0x0F	; 15
 cea:	40 5d       	subi	r20, 0xD0	; 208
 cec:	4a 33       	cpi	r20, 0x3A	; 58
 cee:	18 f0       	brcs	.+6      	; 0xcf6 <__ultoa_invert+0x7c>
 cf0:	49 5d       	subi	r20, 0xD9	; 217
 cf2:	31 fd       	sbrc	r19, 1
 cf4:	40 52       	subi	r20, 0x20	; 32
 cf6:	41 93       	st	Z+, r20
 cf8:	02 d0       	rcall	.+4      	; 0xcfe <__ultoa_invert+0x84>
 cfa:	a9 f7       	brne	.-22     	; 0xce6 <__ultoa_invert+0x6c>
 cfc:	ea cf       	rjmp	.-44     	; 0xcd2 <__ultoa_invert+0x58>
 cfe:	b4 e0       	ldi	r27, 0x04	; 4
 d00:	a6 95       	lsr	r26
 d02:	97 95       	ror	r25
 d04:	87 95       	ror	r24
 d06:	77 95       	ror	r23
 d08:	67 95       	ror	r22
 d0a:	ba 95       	dec	r27
 d0c:	c9 f7       	brne	.-14     	; 0xd00 <__ultoa_invert+0x86>
 d0e:	00 97       	sbiw	r24, 0x00	; 0
 d10:	61 05       	cpc	r22, r1
 d12:	71 05       	cpc	r23, r1
 d14:	08 95       	ret
 d16:	9b 01       	movw	r18, r22
 d18:	ac 01       	movw	r20, r24
 d1a:	0a 2e       	mov	r0, r26
 d1c:	06 94       	lsr	r0
 d1e:	57 95       	ror	r21
 d20:	47 95       	ror	r20
 d22:	37 95       	ror	r19
 d24:	27 95       	ror	r18
 d26:	ba 95       	dec	r27
 d28:	c9 f7       	brne	.-14     	; 0xd1c <__ultoa_invert+0xa2>
 d2a:	62 0f       	add	r22, r18
 d2c:	73 1f       	adc	r23, r19
 d2e:	84 1f       	adc	r24, r20
 d30:	95 1f       	adc	r25, r21
 d32:	a0 1d       	adc	r26, r0
 d34:	08 95       	ret

00000d36 <_exit>:
 d36:	f8 94       	cli

00000d38 <__stop_program>:
 d38:	ff cf       	rjmp	.-2      	; 0xd38 <__stop_program>
